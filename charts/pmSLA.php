<?php

// Verify that the plugin "enterprisePlugin" is installed
if (!class_exists('enterprisePlugin')) {
    return;
}

G::LoadClass('plugin');

if (!defined('PATH_PM_SLA')) {
    define('PATH_PM_SLA', PATH_CORE . 'plugins' . PATH_SEP . 'pmSLA' . PATH_SEP );
}

class pmSLAPlugin extends enterprisePlugin
{
    private $dashletsUids;

    public function pmSLAPlugin ($sNamespace, $sFilename = null)
    {
        $res = parent::PMPlugin($sNamespace, $sFilename);
        $this->sFriendlyName = "pmSLA Plugin";
        $this->sDescription  = "Autogenerated plugin for class pmSLA";
        $this->sPluginFolder = "pmSLA";
        $this->sSetupPage    = "setup";
        $this->iVersion      = self::getPluginVersion($sNamespace);
        $this->aWorkspaces   = null;
        $this->aDependences  = array(array('sClassName' => 'enterprise'), array('sClassName' => 'pmLicenseManager'));
        $this->bPrivate      = parent::registerEE($this->sPluginFolder, $this->iVersion);


        $this->dashletsUids = array(
            array("DAS_UID" => G::generateUniqueID(),
                "DAS_CLASS" => "dashletpmSLA",
                "DAS_TITLE" => "Dashlet SLA",
                "DAS_DESCRIPTION" => "Dashlet pmSLA",
                "DAS_VERSION" => "1.0",
                "DAS_CREATE_DATE" => date("Y-m-d H:i:s"),
                "DAS_UPDATE_DATE" => date("Y-m-d H:i:s")
            )
        );

        return $res;
    }

    public function setup()
    {
        $this->registerMenu("setup", "menusSetupPmSLA.php");
        $this->registerPmFunction();
        $this->redirectLogin("PROCESSMAKER_PMSLA", "users/users_List");
        $this->registerDashlets();

        $this->copyInstallFilesSla();
    }

    public function install()
    {
        $RBAC = RBAC::getSingleton() ;
        $RBAC->initRBAC();
        $roleData = array();
        $roleData["ROL_UID"] = G::GenerateUniqueId();
        $roleData["ROL_PARENT"] = "";
        $roleData["ROL_SYSTEM"] = "00000000000000000000000000000002";
        $roleData["ROL_CODE"] = "PROCESSMAKER_PMSLA";
        $roleData["ROL_CREATE_DATE"] = date("Y-m-d H:i:s");
        $roleData["ROL_UPDATE_DATE"] = date("Y-m-d H:i:s");
        $roleData["ROL_STATUS"] = "1";
        $RBAC->createRole($roleData);
        $RBAC->createPermision("PM_PMSLA");

        $this->copyInstallFilesSla();
    }

    public function enable()
    {
        $this->dashletInsert();
        $sqlFile = PATH_CORE . 'plugins' . PATH_SEP . 'pmSLA' . PATH_SEP . 'data'.
                   PATH_SEP . 'mysql' . PATH_SEP . 'schema.sql';

        $handle = @fopen( $sqlFile, "r"); // Open file form read.
        $line = '';
        if ($handle) {
            // Loop til end of file.
            while (!feof($handle)) {
                // Read a line.
                $buffer = fgets($handle, 4096);
                // Check for valid lines
                if ($buffer[0] != "#" && strlen(trim($buffer)) >0) {
                    $buffer = trim( $buffer);
                    $line .= $buffer;
                    if ( $buffer[strlen( $buffer)-1] == ';' ) {
                        $con = Propel::getConnection('workflow');
                        $stmt = $con->createStatement();
                        $rs = $stmt->executeQuery($line, ResultSet::FETCHMODE_NUM);
                        $line = '';
                    }
                }
            }
            // Close the file.
            fclose($handle);
        }
        $this->copyInstallFilesSla();
    }

    public function disable()
    {
        $this->dashletDelete();
    }

    public function copyInstallFilesSla()
    {
        $binFile  = PATH_HOME . 'engine' . PATH_SEP . 'bin' . PATH_SEP . 'plugins' .
                    PATH_SEP . 'pmSLA.php' ;
        $this->copy( 'services/pmSLA.php', $binFile, false, true);
    }

    public function dashletInsert()
    {
        require_once ("classes/model/Dashlet.php");

        $connection = Propel::getConnection(DashletPeer::DATABASE_NAME);

        foreach ($this->dashletsUids as $dashletData) {
            $dashlet = new Dashlet();

            if (is_null($dashlet->load($dashletData["DAS_UID"]))) {
                $dashlet->fromArray($dashletData, BasePeer::TYPE_FIELDNAME);
                $connection->begin();
                $dashlet->save();
                $connection->commit();
            }
        }
    }

    public function dashletDelete()
    {
        require_once ("classes/model/Dashlet.php");

        foreach ($this->dashletsUids as $dashletData) {
            $criteria = new Criteria("workflow");
            $criteria->add(DashletPeer::DAS_UID, $dashletData["DAS_UID"]);
            DashletPeer::doDelete($criteria);
        }
    }

    /**
     * This method get the version of this plugin, when the plugin is packaged in the tar.gz
     * the file "version" in the plugin folder has this information for development purposes,
     * we calculate the version using git commands, because the repository is in GIT
     *
     * @param String $namespace The namespace of the plugin
     * @return String $version
     */
    private static function getPluginVersion($namespace)
    {
        $pathPluginTrunk = PATH_PLUGINS . PATH_SEP . $namespace;
        if (file_exists($pathPluginTrunk . PATH_SEP . 'VERSION')) {
            $version = trim(file_get_contents($pathPluginTrunk . PATH_SEP . 'VERSION'));
        } else {
            $cmd = sprintf("cd %s && git status | grep 'On branch' | awk '{print $3 $4} ' && git log --decorate |".
                " grep '(tag:' | head -1  | awk '{print $3$4} ' ",
                $pathPluginTrunk);
            if (exec($cmd , $target)) {
                $cmd = sprintf("cd %s && git log --decorate | grep 'tag:' | head -1  | awk '{print $2} ' ",
                    $pathPluginTrunk);
                $commit = exec($cmd , $dummyTarget);
                $version = $target;
                if ($commit != '') {
                    $cmd = sprintf("echo ' +' && cd %s && git log %s.. --oneline | wc -l && echo ' commits.'",
                        $pathPluginTrunk, $commit);
                    exec($cmd , $target) ;
                    $version = implode(' ', $target);
                } else {
                    $version = implode(' ', $target);
                }
            } else {
                $version = 'Development Version';
            }
        }
        return $version;
    }
}

$oPluginRegistry = &PMPluginRegistry::getSingleton();
$oPluginRegistry->registerPlugin("pmSLA", __FILE__);


<?php
G::LoadClass("plugin");
G::LoadClass('pmFunctions');
G::LoadClass('configuration');
require_once ("classes/model/Users.php");
class fieldcontrolPlugin extends PMPlugin
{
  private $dashletsUids;
  
  public function fieldcontrolPlugin($sNamespace, $sFilename = null)
  {
    $res = parent::PMPlugin($sNamespace, $sFilename);
    $this->sFriendlyName = "fieldcontrol Plugin";
    $this->sDescription  = "Autogenerated plugin for class fieldcontrol";
    $this->sPluginFolder = "fieldcontrol";
    $this->sSetupPage    = "setup";
    $this->iVersion      = 3.6;
    //$this->iPMVersion    = 2425;
    $this->aWorkspaces   = null;
    //$this->aWorkspaces = array("os");
    
    
    $this->dashletsUids = array(
      array("DAS_UID" => "650122093510a814b840ef9049211605",
            "DAS_CLASS" => "dashletfieldcontrol",
            "DAS_TITLE" => "Dashlet fieldcontrol",
            "DAS_DESCRIPTION" => "Dashlet fieldcontrol",
            "DAS_VERSION" => "1.0",
            "DAS_CREATE_DATE" => date("Y-m-d"),
            "DAS_UPDATE_DATE" => date("Y-m-d"))
    );
    
    
    return $res;
  }

  public function setup()
  {
    //$this->registerMenu("processmaker", "menufieldcontrol.php");
    //$this->registerMenu("cases", "menuCasesfieldcontrol.php");
    $this->registerMenu( 'setup', 'disableMenu.php');
    $this->registerMenu("processmaker", "menuSetPermissionByField.php");
  
    if(method_exists($this,'registerCss'))
    {
        $this->registerCss("/plugin/fieldcontrol/setupcss");
    }
    else
    {
    	die('yesss');
    }   
    if(isset($_SESSION['USER_LOGGED']))
    {
	    $users=$_SESSION['USER_LOGGED'];
	    $Us = new Users();
	    $Roles=$Us->load($users);
	    $rolesAdmin=$Roles['USR_ROLE'];     
	    $this->redirectLogin( $rolesAdmin , 'fieldcontrol/UserConfiguration' );
    }  
    //$this->registerMenu( "cases", "newOptionCases.php");
    $this->registerPmFunction();    
    $this->registerDashlets();
   
  }

  public function install()
  {
    /*$RBAC = RBAC::getSingleton() ;
    $RBAC->initRBAC();
    $roleData = array();
    $roleData["ROL_UID"] = G::GenerateUniqueId();
    $roleData["ROL_PARENT"] = "";
    $roleData["ROL_SYSTEM"] = "00000000000000000000000000000002";
    $roleData["ROL_CODE"] = "PROCESSMAKER_FIELDCONTROL";
    $roleData["ROL_CREATE_DATE"] = date("Y-m-d H:i:s");
    $roleData["ROL_UPDATE_DATE"] = date("Y-m-d H:i:s");
    $roleData["ROL_STATUS"] = "1";
    $RBAC->createRole($roleData);
    $RBAC->createPermision("PM_FIELDCONTROL");*/
  }
  
  public function enable()
  {
    $this->dashletInsert();
  }

  public function disable()
  {
    $this->dashletDelete();
  }
  
  public function dashletInsert()
  {
    require_once ("classes/model/Dashlet.php");
    
    $connection = Propel::getConnection(DashletPeer::DATABASE_NAME);
    
    foreach ($this->dashletsUids as $dashletData) {
      $dashlet = new Dashlet();
      
      if (is_null($dashlet->load($dashletData["DAS_UID"]))) {
        $dashlet->fromArray($dashletData, BasePeer::TYPE_FIELDNAME);
        $connection->begin();
        $dashlet->save();
        $connection->commit();
      }
    }
  }
  
  public function dashletDelete()
  {
    require_once ("classes/model/Dashlet.php");
    
    foreach ($this->dashletsUids as $dashletData) {
      $criteria = new Criteria("workflow");
      $criteria->add(DashletPeer::DAS_UID, $dashletData["DAS_UID"]);
      DashletPeer::doDelete($criteria);
    }
  }
  
}

$oPluginRegistry = &PMPluginRegistry::getSingleton();
$oPluginRegistry->registerPlugin("fieldcontrol", __FILE__);
?>
